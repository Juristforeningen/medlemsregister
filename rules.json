{
  "rules": {
    "users": {
      "$uid": {
        ".validate": "newData.hasChildren(['name', 'email', 'classOf', 'isMember']) && (newData.child('isMember').val() == false || auth != null && newData.parent().parent().child('admins').child(auth.uid).val() != null)",
        "name": {
          ".validate": "newData.isString()"
        },
        "email": {
          ".validate": "newData.isString()"
        },
        "classOf": {
          ".validate": "newData.isString()"
        },
        "isMember": {
          ".validate": "newData.isBoolean()"
        },
        "$other": {
          ".validate": "false"
        },
        ".read": "auth != null && auth.uid == $uid || auth != null && root.child('admins').child(auth.uid).val() != null",
        ".write": "auth != null && auth.uid == $uid || auth != null && newData.parent().parent().child('admins').child(auth.uid).val() != null"
      },
      ".read": "auth != null && root.child('admins').child(auth.uid).val() != null"
    }
  }
}
